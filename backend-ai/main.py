from fastapi import FastAPI, File, UploadFile, HTTPException, Form
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv
import os
import json

# LangChain
from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.output_parsers import StrOutputParser

# OpenAI pour Whisper
import openai

load_dotenv()

app = FastAPI(
    title="Sant√© K√®n√® - AI Service",
    description="API pour les services d'IA (Whisper, LLaMA3, LangChain) de Sant√© K√®n√®.",
    version="0.1.0",
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:3001"],  # Frontend URLs
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configuration OpenAI
openai_api_key = os.getenv("OPENAI_API_KEY")
if not openai_api_key:
    raise ValueError("OPENAI_API_KEY n'est pas d√©finie dans les variables d'environnement.")

openai_client = openai.OpenAI(api_key=openai_api_key)

# Mod√®le de langage pour le triage (simul√© avec OpenAI GPT-4)
llm = ChatOpenAI(model="gpt-4o-mini", temperature=0, openai_api_key=openai_api_key)

# Prompt am√©lior√© pour le triage intelligent et complet
triage_prompt = ChatPromptTemplate.from_messages([
    ("system", """Vous √™tes un assistant m√©dical IA expert pour le syst√®me de sant√© Sant√© K√®n√®. 
Votre r√¥le est d'analyser les sympt√¥mes d'un patient et de fournir des recommandations m√©dicales pr√©cises.

Vous devez TOUJOURS r√©pondre au format JSON suivant (sans markdown, juste le JSON brut):
{{
  "summary": "R√©sum√© concis des sympt√¥mes en 1-2 phrases",
  "urgency": "faible|mod√©r√©|urgent",
  "specialties": ["Sp√©cialit√©1", "Sp√©cialit√©2"],
  "precautions": ["Pr√©caution 1", "Pr√©caution 2", "Pr√©caution 3"],
  "recommendations": ["Recommandation 1", "Recommandation 2"],
  "consultation_type": "presentiel|en_ligne|urgence",
  "explanation": "Explication d√©taill√©e de l'analyse"
}}

Crit√®res d'urgence:
- "urgent": Sympt√¥mes graves n√©cessitant une attention imm√©diate (douleur thoracique, difficult√© respiratoire s√©v√®re, saignement important, perte de conscience)
- "mod√©r√©": Sympt√¥mes significatifs n√©cessitant une consultation rapide (fi√®vre √©lev√©e persistante, douleur intense, sympt√¥mes durant plusieurs jours)
- "faible": Sympt√¥mes l√©gers ou courants (rhume, l√©g√®re fi√®vre, fatigue)

Sp√©cialit√©s disponibles: M√©decine G√©n√©rale, Cardiologie, Dermatologie, P√©diatrie, Gyn√©cologie, Neurologie, Orthop√©die, ORL, Pneumologie, Gastro-ent√©rologie

Type de consultation:
- "urgence": Pour les cas urgents n√©cessitant une intervention imm√©diate
- "presentiel": Pour les cas n√©cessitant un examen physique
- "en_ligne": Pour les cas pouvant √™tre g√©r√©s en t√©l√©consultation

R√©pondez UNIQUEMENT en fran√ßais et UNIQUEMENT au format JSON."""),
    ("user", "Sympt√¥mes du patient: {symptoms}"),
])

triage_chain = triage_prompt | llm | StrOutputParser()

@app.get("/", tags=["Health Check"])
async def root():
    return {"message": "Sant√© K√®n√® AI Service is running."}

@app.post("/api/ai/transcribe", tags=["AI - Whisper"])
async def transcribe_audio(audio_file: UploadFile = File(...)):
    if not audio_file.content_type or not audio_file.content_type.startswith("audio/"):
        raise HTTPException(status_code=400, detail="Le fichier doit √™tre un fichier audio.")

    try:
        # L'API Whisper d'OpenAI supporte directement les fichiers audio
        response = openai_client.audio.transcriptions.create(
            model="whisper-1",
            file=audio_file.file,
            response_format="text"
        )
        return {"transcription": response}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la transcription audio: {e}")

@app.post("/api/ai/triage", tags=["AI - LangChain/LLaMA3"])
async def ai_triage(symptoms: str = Form(...), latitude: float = Form(None), longitude: float = Form(None)):
    if not symptoms:
        raise HTTPException(status_code=400, detail="Les sympt√¥mes sont requis pour le triage.")
    
    try:
        # Analyse IA des sympt√¥mes
        result = await triage_chain.invoke({"symptoms": symptoms})
        
        # Nettoyer le r√©sultat (enlever les balises markdown si pr√©sentes)
        cleaned_result = result.strip()
        if cleaned_result.startswith("```json"):
            cleaned_result = cleaned_result[7:]
        if cleaned_result.startswith("```"):
            cleaned_result = cleaned_result[3:]
        if cleaned_result.endswith("```"):
            cleaned_result = cleaned_result[:-3]
        cleaned_result = cleaned_result.strip()
        
        # Parser le JSON
        try:
            triage_data = json.loads(cleaned_result)
        except json.JSONDecodeError as e:
            print(f"Erreur de parsing JSON: {e}")
            print(f"R√©sultat brut: {result}")
            # Fallback: cr√©er une structure de base
            triage_data = {
                "summary": "Analyse en cours...",
                "urgency": "mod√©r√©",
                "specialties": ["M√©decine G√©n√©rale"],
                "precautions": ["Consultez un m√©decin"],
                "recommendations": ["Prenez rendez-vous d√®s que possible"],
                "consultation_type": "presentiel",
                "explanation": result
            }
        
        # Valider et normaliser les donn√©es
        urgency = triage_data.get("urgency", "mod√©r√©").lower()
        if urgency not in ["faible", "mod√©r√©", "urgent"]:
            urgency = "mod√©r√©"
        
        consultation_type = triage_data.get("consultation_type", "presentiel").lower()
        if consultation_type not in ["presentiel", "en_ligne", "urgence"]:
            consultation_type = "presentiel"
        
        # Pr√©parer la r√©ponse finale
        response_data = {
            "summary": triage_data.get("summary", "Analyse des sympt√¥mes termin√©e"),
            "urgency": urgency,
            "urgency_label": {
                "faible": "Urgence Faible",
                "mod√©r√©": "Urgence Mod√©r√©e",
                "urgent": "Urgence √âlev√©e"
            }.get(urgency, "Urgence Mod√©r√©e"),
            "urgency_color": {
                "faible": "green",
                "mod√©r√©": "orange",
                "urgent": "red"
            }.get(urgency, "orange"),
            "specialties": triage_data.get("specialties", ["M√©decine G√©n√©rale"]),
            "precautions": triage_data.get("precautions", []),
            "recommendations": triage_data.get("recommendations", []),
            "consultation_type": consultation_type,
            "consultation_type_label": {
                "presentiel": "Consultation en pr√©sentiel recommand√©e",
                "en_ligne": "T√©l√©consultation possible",
                "urgence": "Consultation d'urgence n√©cessaire"
            }.get(consultation_type, "Consultation recommand√©e"),
            "explanation": triage_data.get("explanation", ""),
            "raw_response": result  # Pour debug
        }
        
        return JSONResponse(response_data)
        
    except Exception as e:
        print(f"Erreur compl√®te: {e}")
        raise HTTPException(status_code=500, detail=f"Erreur lors du triage IA: {str(e)}")


@app.post("/api/ai/medical-assistant")
async def medical_assistant(
    symptoms: str = Form(...),
    patient_info: str = Form(None),
    medical_history: str = Form(None),
    current_findings: str = Form(None)
):
    """
    Assistant IA pour aider le m√©decin pendant une consultation
    Analyse les sympt√¥mes, l'historique et les observations pour sugg√©rer:
    - Diagnostics possibles
    - Examens compl√©mentaires recommand√©s
    - Traitements potentiels
    - Pr√©cautions importantes
    """
    try:
        print(f"üìã Assistant m√©dical - Analyse en cours...")
        print(f"üìù Sympt√¥mes re√ßus: {symptoms[:100]}...")
        print(f"üë§ Patient info: {patient_info}")
        print(f"üìö Historique m√©dical: {medical_history[:200] if medical_history else 'Aucun'}...")
        print(f"üîç Observations: {current_findings[:100] if current_findings else 'Aucune'}...")
        
        # Cr√©er le prompt pour l'assistant m√©decin
        medical_assistant_prompt = ChatPromptTemplate.from_messages([
            ("system", """Vous √™tes un assistant m√©dical IA expert qui aide les m√©decins pendant leurs consultations.
Votre r√¥le est d'analyser les informations du patient et de fournir des suggestions de diagnostic et de traitement.

‚ö†Ô∏è IMPORTANT: 
- Vos suggestions sont des AIDES √Ä LA D√âCISION pour le m√©decin, pas des diagnostics d√©finitifs.
- Utilisez SYST√âMATIQUEMENT l'historique m√©dical fourni pour affiner votre diagnostic.
- Si l'historique m√©dical contient des informations pertinentes, mentionnez-les dans votre raisonnement.

Vous devez TOUJOURS r√©pondre au format JSON suivant (sans markdown, juste le JSON brut):
{{
  "differential_diagnosis": ["Liste de 3-5 diagnostics possibles par ordre de probabilit√© d√©croissante"],
  "recommended_tests": ["Liste de 3-5 examens compl√©mentaires recommand√©s avec justification"],
  "treatment_suggestions": ["Liste de 3-5 suggestions de traitements potentiels avec posologie si appropri√©"],
  "red_flags": ["Liste de 2-4 signes d'alerte importants √† surveiller"],
  "precautions": ["Liste de 2-3 pr√©cautions √† prendre"],
  "follow_up": "Recommandations d√©taill√©es pour le suivi (quand revoir le patient, quoi surveiller)",
  "confidence_level": "faible|moyen|√©lev√©",
  "explanation": "Explication d√©taill√©e du raisonnement m√©dical en 3-5 phrases, en citant l'historique m√©dical si pertinent"
}}

Basez votre analyse sur:
1. Les sympt√¥mes actuels pr√©sent√©s
2. L'HISTORIQUE M√âDICAL du patient (TR√àS IMPORTANT - √† utiliser syst√©matiquement)
3. Les observations cliniques du m√©decin
4. Les informations d√©mographiques du patient
5. Les meilleures pratiques m√©dicales actuelles"""),
            ("user", """üè• ANALYSE M√âDICALE COMPL√àTE

üë§ PATIENT:
{patient_info}

üìö HISTORIQUE M√âDICAL (consultations ant√©rieures):
{medical_history}

ü§í SYMPT√îMES ACTUELS:
{symptoms}

üîç OBSERVATIONS CLINIQUES DU M√âDECIN:
{current_findings}

‚öïÔ∏è Fournis une analyse m√©dicale compl√®te en tenant compte de TOUS ces √©l√©ments, notamment l'historique m√©dical.""")
        ])
        
        # Cr√©er la cha√Æne de traitement
        chain = medical_assistant_prompt | llm | StrOutputParser()
        
        # Ex√©cuter l'analyse
        result = chain.invoke({
            "symptoms": symptoms,
            "patient_info": patient_info or "Non renseign√©",
            "medical_history": medical_history or "Non renseign√©",
            "current_findings": current_findings or "√âvaluation en cours"
        })
        
        print(f"‚úÖ R√©sultat re√ßu de OpenAI")
        print(f"üìÑ Longueur r√©ponse: {len(result)} caract√®res")
        print(f"üìÑ D√©but: {result[:300]}...")
        
        # Parser le r√©sultat JSON
        try:
            # Nettoyer la r√©ponse (supprimer les markdown code blocks si pr√©sents)
            clean_result = result.strip()
            if clean_result.startswith("```json"):
                clean_result = clean_result[7:]
            if clean_result.startswith("```"):
                clean_result = clean_result[3:]
            if clean_result.endswith("```"):
                clean_result = clean_result[:-3]
            clean_result = clean_result.strip()
            
            print(f"üßπ JSON nettoy√©, tentative de parsing...")
            analysis_data = json.loads(clean_result)
            print(f"‚úÖ JSON pars√© avec succ√®s !")
            
        except json.JSONDecodeError as json_err:
            print(f"‚ùå Erreur JSON parsing: {json_err}")
            print(f"üìÑ R√©ponse brute compl√®te: {result}")
            # Fallback avec donn√©es par d√©faut
            analysis_data = {
                "differential_diagnosis": ["‚ö†Ô∏è Erreur de parsing - Veuillez v√©rifier le backend IA"],
                "recommended_tests": ["V√©rifier les logs du serveur backend-ai"],
                "treatment_suggestions": ["Relancer le serveur backend-ai"],
                "red_flags": ["Erreur de communication avec l'IA"],
                "precautions": ["V√©rifier la cl√© OpenAI et le quota"],
                "follow_up": "Contacter l'administrateur syst√®me",
                "confidence_level": "faible",
                "explanation": f"Erreur technique: {str(json_err)}\n\nR√©ponse brute: {result[:500]}"
            }
        
        # Pr√©parer la r√©ponse
        response_data = {
            "success": True,
            "differential_diagnosis": analysis_data.get("differential_diagnosis", []),
            "recommended_tests": analysis_data.get("recommended_tests", []),
            "treatment_suggestions": analysis_data.get("treatment_suggestions", []),
            "red_flags": analysis_data.get("red_flags", []),
            "precautions": analysis_data.get("precautions", []),
            "follow_up": analysis_data.get("follow_up", ""),
            "confidence_level": analysis_data.get("confidence_level", "moyen"),
            "confidence_label": {
                "faible": "Confidence Faible",
                "moyen": "Confidence Moyenne",
                "√©lev√©": "Confidence √âlev√©e"
            }.get(analysis_data.get("confidence_level", "moyen"), "Confidence Moyenne"),
            "explanation": analysis_data.get("explanation", ""),
            "disclaimer": "‚ö†Ô∏è Ces suggestions sont des aides √† la d√©cision. Le m√©decin reste responsable du diagnostic et du traitement final."
        }
        
        print(f"‚úÖ R√©ponse pr√©par√©e et envoy√©e au frontend")
        return JSONResponse(response_data)
        
    except Exception as e:
        print(f"‚ùå ERREUR COMPL√àTE: {e}")
        print(f"‚ùå Type: {type(e).__name__}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=f"Erreur de l'assistant m√©dical: {str(e)}")


# ============================================
# LANCEMENT DU SERVEUR
# ============================================
if __name__ == "__main__":
    import uvicorn
    print("=" * 60)
    print("üöÄ D√©marrage du serveur Sant√© K√®n√® AI...")
    print("=" * 60)
    print("üì° URL: http://localhost:8000")
    print("üìö Documentation: http://localhost:8000/docs")
    print("=" * 60)
    uvicorn.run(app, host="0.0.0.0", port=8000, log_level="info")
