import { Request, Response } from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { PrismaClient, Role } from '@prisma/client';
import { z } from 'zod';

const prisma = new PrismaClient();
const JWT_SECRET = process.env.JWT_SECRET || 'supersecretjwtkey'; // √Ä remplacer par une variable d'environnement forte

// Sch√©mas de validation Zod pour chaque type d'utilisateur
const patientRegisterSchema = z.object({
  role: z.literal('PATIENT'),
  name: z.string().min(2, "Le nom complet doit contenir au moins 2 caract√®res"),
  email: z.string().email("Email invalide"),
  phone: z.string().min(8, "Le num√©ro de t√©l√©phone doit contenir au moins 8 caract√®res"),
  password: z.string().min(6, "Le mot de passe doit contenir au moins 6 caract√®res"),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Les mots de passe ne correspondent pas",
  path: ["confirmPassword"],
});

const medecinRegisterSchema = z.object({
  role: z.literal('MEDECIN'),
  name: z.string().min(2, "Le nom complet doit contenir au moins 2 caract√®res"),
  email: z.string().email("Email invalide"),
  phone: z.string().min(8, "Le num√©ro de t√©l√©phone doit contenir au moins 8 caract√®res"),
  speciality: z.string().min(2, "La fonction/sp√©cialit√© est requise"),
  facilityId: z.number().int().positive("Vous devez s√©lectionner un √©tablissement"),
  location: z.string().min(2, "La r√©sidence est requise"),
  password: z.string().min(6, "Le mot de passe doit contenir au moins 6 caract√®res"),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Les mots de passe ne correspondent pas",
  path: ["confirmPassword"],
});

const adminRegisterSchema = z.object({
  role: z.literal('ADMIN'),
  // Informations de la structure
  facilityName: z.string().min(2, "Le nom de la structure est requis"),
  facilityType: z.string().min(2, "Le type de structure est requis"),
  facilityCity: z.string().min(2, "La localit√© de la structure est requise"),
  facilityPhone: z.string().min(8, "Le contact de la structure est requis"),
  documentUrl: z.string().optional().nullable(), // URL base64 ou lien vers le document (optionnel)
  documentType: z.string().optional(),
  // Informations du responsable
  responsibleName: z.string().min(2, "Le nom complet du responsable est requis"),
  responsibleEmail: z.string().email("Email du responsable invalide"),
  responsiblePhone: z.string().min(8, "Le contact du responsable est requis"),
  password: z.string().min(6, "Le mot de passe doit contenir au moins 6 caract√®res"),
  confirmPassword: z.string(),
}).refine((data) => data.password === data.confirmPassword, {
  message: "Les mots de passe ne correspondent pas",
  path: ["confirmPassword"],
});

const loginSchema = z.object({
  email: z.string().email("Email invalide"),
  password: z.string().min(1, "Le mot de passe est requis"),
});

/**
 * R√©cup√©rer les structures de sant√© approuv√©es
 */
export const getApprovedFacilities = async (req: Request, res: Response) => {
  try {
    const facilities = await prisma.healthFacilityRequest.findMany({
      where: {
        status: 'APPROVED',
      },
      select: {
        id: true,
        facilityName: true,
        facilityType: true,
        facilityCity: true,
      },
      orderBy: {
        facilityName: 'asc',
      },
    });

    return res.status(200).json({ facilities });
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration structures:', error);
    return res.status(500).json({ error: 'Erreur serveur', details: (error as Error).message });
  }
};

/**
 * Inscription d'un nouvel utilisateur (Patient, M√©decin ou Admin)
 */
export const register = async (req: Request, res: Response) => {
  try {
    const { role } = req.body;

    // S√©lectionner le sch√©ma de validation appropri√©
    let validatedData: any;
    
    if (role === 'PATIENT') {
      validatedData = patientRegisterSchema.parse(req.body);
    } else if (role === 'MEDECIN') {
      validatedData = medecinRegisterSchema.parse(req.body);
    } else if (role === 'ADMIN') {
      validatedData = adminRegisterSchema.parse(req.body);
    } else {
      return res.status(400).json({ error: 'R√¥le invalide. Choisissez PATIENT, MEDECIN ou ADMIN.' });
    }

    // === INSCRIPTION PATIENT ===
    if (role === 'PATIENT') {
      const { name, email, phone, password } = validatedData;

      // V√©rifier si l'email existe d√©j√†
      const existingEmail = await prisma.user.findUnique({ where: { email } });
      if (existingEmail) {
        return res.status(400).json({ error: 'Un utilisateur avec cet email existe d√©j√†.' });
      }

      // V√©rifier si le t√©l√©phone existe d√©j√†
      const existingPhone = await prisma.user.findUnique({ where: { phone } });
      if (existingPhone) {
        return res.status(400).json({ error: 'Ce num√©ro de t√©l√©phone est d√©j√† utilis√©.' });
      }

      // Hasher le mot de passe
      const hashedPassword = await bcrypt.hash(password, 10);

      // Cr√©er l'utilisateur patient (isVerified = true pour patient)
      const user = await prisma.user.create({
        data: {
          name,
          email,
          phone,
          password: hashedPassword,
          role: Role.PATIENT,
          isVerified: true, // Patient peut se connecter imm√©diatement
        },
      });

      // Cr√©er le profil patient
      await prisma.patient.create({
        data: {
          userId: user.id,
        },
      });

      // Cr√©er un token JWT
      const token = jwt.sign(
        { userId: user.id, email: user.email, role: user.role },
        JWT_SECRET,
        { expiresIn: '7d' }
      );

      // Cr√©er une session
      const expiresAt = new Date();
      expiresAt.setDate(expiresAt.getDate() + 7);

      await prisma.session.create({
        data: {
          userId: user.id,
          token,
          expiresAt,
        },
      });

      const { password: _, ...userWithoutPassword } = user;
      return res.status(201).json({
        message: 'Compte patient cr√©√© avec succ√®s ! Vous pouvez compl√©ter votre profil dans les param√®tres.',
        user: userWithoutPassword,
        token,
      });
    }

    // === INSCRIPTION M√âDECIN ===
    if (role === 'MEDECIN') {
      const { name, email, phone, password, speciality, facilityId, location } = validatedData;

      // V√©rifier si l'email existe d√©j√†
      const existingEmail = await prisma.user.findUnique({ where: { email } });
      if (existingEmail) {
        return res.status(400).json({ error: 'Un utilisateur avec cet email existe d√©j√†.' });
      }

      // V√©rifier si le t√©l√©phone existe d√©j√†
      const existingPhone = await prisma.user.findUnique({ where: { phone } });
      if (existingPhone) {
        return res.status(400).json({ error: 'Ce num√©ro de t√©l√©phone est d√©j√† utilis√©.' });
      }

      // V√©rifier que la structure existe et est approuv√©e
      const facility = await prisma.healthFacilityRequest.findUnique({
        where: { id: facilityId },
      });

      if (!facility) {
        return res.status(400).json({ error: 'Structure non trouv√©e.' });
      }

      if (facility.status !== 'APPROVED') {
        return res.status(400).json({ error: 'Cette structure n\'est pas encore approuv√©e.' });
      }

      // Hasher le mot de passe
      const hashedPassword = await bcrypt.hash(password, 10);

      // Cr√©er l'utilisateur m√©decin (isVerified = false, doit √™tre valid√© par admin)
      const user = await prisma.user.create({
        data: {
          name,
          email,
          phone,
          password: hashedPassword,
          role: Role.MEDECIN,
          isVerified: false, // M√©decin doit √™tre valid√© par un admin
        },
      });

      // Cr√©er le profil m√©decin li√© √† la structure
      await prisma.doctor.create({
        data: {
          userId: user.id,
          speciality,
          facilityId,
          structure: facility.facilityName, // Garder aussi le nom en fallback
          location,
          phone,
        },
      });

      return res.status(201).json({
        message: `Votre demande d'inscription √† ${facility.facilityName} a √©t√© soumise avec succ√®s. Vous recevrez un email une fois votre compte valid√© par l'administrateur.`,
        requiresValidation: true,
        facilityName: facility.facilityName,
      });
    }

    // === INSCRIPTION ADMIN (Repr√©sentant de structure) ===
    if (role === 'ADMIN') {
      console.log('üè• D√©but inscription Admin...');
      const {
        facilityName,
        facilityType,
        facilityCity,
        facilityPhone,
        documentUrl,
        documentType,
        responsibleName,
        responsibleEmail,
        responsiblePhone,
        password,
      } = validatedData;

      console.log(`üìù Donn√©es re√ßues - Structure: ${facilityName}, Responsable: ${responsibleName}`);

      // V√©rifier si l'email du responsable existe d√©j√†
      const existingEmail = await prisma.user.findUnique({ where: { email: responsibleEmail } });
      if (existingEmail) {
        return res.status(400).json({ error: 'Un utilisateur avec cet email existe d√©j√†.' });
      }

      // V√©rifier si le t√©l√©phone du responsable existe d√©j√†
      const existingPhone = await prisma.user.findUnique({ where: { phone: responsiblePhone } });
      if (existingPhone) {
        return res.status(400).json({ error: 'Ce num√©ro de t√©l√©phone est d√©j√† utilis√©.' });
      }

      // V√©rifier si l'email de la structure existe d√©j√†
      const existingFacilityEmail = await prisma.healthFacilityRequest.findUnique({
        where: { facilityEmail: responsibleEmail },
      });
      if (existingFacilityEmail) {
        return res.status(400).json({ error: 'Cette structure a d√©j√† soumis une demande.' });
      }

      try {
        // Hasher le mot de passe
        const hashedPassword = await bcrypt.hash(password, 10);
        console.log('‚úÖ Mot de passe hash√©');

        // Cr√©er l'utilisateur admin (isVerified = false, doit √™tre valid√© par super admin)
        const user = await prisma.user.create({
          data: {
            name: responsibleName,
            email: responsibleEmail,
            phone: responsiblePhone,
            password: hashedPassword,
            role: Role.ADMIN,
            isVerified: false, // Admin doit √™tre valid√© par un super admin
          },
        });
        console.log(`‚úÖ Utilisateur admin cr√©√© - ID: ${user.id}`);

        // Cr√©er la demande de structure de sant√©
        const facilityRequest = await prisma.healthFacilityRequest.create({
          data: {
            facilityName,
            facilityType,
            facilityAddress: `${facilityCity}`, // On utilise la ville comme adresse pour l'instant
            facilityCity,
            facilityPhone,
            facilityEmail: responsibleEmail, // Email de la structure = email du responsable
            responsibleName,
            responsiblePosition: 'Repr√©sentant', // Par d√©faut
            responsiblePhone,
            responsibleEmail,
            documentUrl: documentUrl || null,
            documentType: documentType || 'Document de validation',
            status: 'PENDING',
          },
        });
        console.log(`‚úÖ Demande de structure cr√©√©e - ID: ${facilityRequest.id}`);

        // Cr√©er le profil admin li√© √† la demande
        const admin = await prisma.admin.create({
          data: {
            userId: user.id,
            facilityRequestId: facilityRequest.id,
          },
        });
        console.log(`‚úÖ Profil admin cr√©√© et li√© √† la structure - Admin ID: ${admin.id}`);

        return res.status(201).json({
          message: 'Votre demande d\'inscription de structure a √©t√© soumise avec succ√®s. Un Super Admin examinera votre demande et vous recevrez un email une fois valid√©e.',
          requiresValidation: true,
          facilityRequestId: facilityRequest.id,
          userId: user.id,
        });
      } catch (error) {
        console.error('‚ùå Erreur d√©taill√©e lors de la cr√©ation Admin/Structure:', error);
        
        // Si on a cr√©√© l'utilisateur mais pas la structure, on peut essayer de nettoyer
        // (optionnel, selon votre strat√©gie)
        
        throw error; // Relancer pour la gestion globale
      }
    }

    return res.status(400).json({ error: 'R√¥le non reconnu.' });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ 
        error: 'Donn√©es invalides', 
        details: (error as any).errors.map((e: any) => ({ field: e.path.join('.'), message: e.message })) 
      });
    }
    console.error('‚ùå Erreur lors de l\'inscription:', error);
    return res.status(500).json({ error: 'Erreur serveur lors de l\'inscription.', details: (error as Error).message });
  }
};

/**
 * Connexion d'un utilisateur
 */
export const login = async (req: Request, res: Response) => {
  try {
    // Validation des donn√©es
    const validatedData = loginSchema.parse(req.body);
    const { email, password } = validatedData;

    // Trouver l'utilisateur
    const user = await prisma.user.findUnique({
      where: { email },
    });

    if (!user) {
      return res.status(401).json({ error: 'Email ou mot de passe incorrect.' });
    }

    // V√©rifier le mot de passe
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Email ou mot de passe incorrect.' });
    }

    // V√©rifier si le compte est actif (v√©rifi√©)
    if (!user.isVerified) {
      return res.status(403).json({ error: 'Votre compte a √©t√© d√©sactiv√©. Veuillez contacter l\'administrateur.' });
    }

    // Cr√©er un token JWT
    const token = jwt.sign(
      { userId: user.id, email: user.email, role: user.role },
      JWT_SECRET,
      { expiresIn: '7d' }
    );

    // Cr√©er une session dans la base de donn√©es
    const expiresAt = new Date();
    expiresAt.setDate(expiresAt.getDate() + 7); // 7 jours

    await prisma.session.create({
      data: {
        userId: user.id,
        token,
        expiresAt,
      },
    });

    // Audit log
    await prisma.auditLog.create({
      data: {
        action: 'LOGIN',
        userId: user.id,
        details: `Utilisateur ${user.email} s'est connect√©`,
      },
    });

    // Retourner l'utilisateur (sans le mot de passe) et le token
    const { password: _, ...userWithoutPassword } = user;
    return res.status(200).json({
      message: 'Connexion r√©ussie',
      user: userWithoutPassword,
      token,
    });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return res.status(400).json({ error: 'Donn√©es invalides', details: (error as any).errors.map((e: any) => ({ field: e.path.join('.'), message: e.message })) });
    }
    console.error('Erreur lors de la connexion:', error);
    return res.status(500).json({ error: 'Erreur serveur lors de la connexion.' });
  }
};

/**
 * D√©connexion d'un utilisateur
 */
export const logout = async (req: Request, res: Response) => {
  try {
    // R√©cup√©rer le token depuis les headers
    const authHeader = req.headers.authorization;
    
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
      return res.status(401).json({ error: 'Token manquant.' });
    }

    const token = authHeader.substring(7); // Enlever "Bearer "

    // V√©rifier et d√©coder le token
    let decoded;
    try {
      decoded = jwt.verify(token, JWT_SECRET) as { userId: number; email: string; role: string };
    } catch (err) {
      return res.status(401).json({ error: 'Token invalide.' });
    }

    // Supprimer la session de la base de donn√©es
    await prisma.session.deleteMany({
      where: {
        token: token,
      },
    });

    // Audit log
    await prisma.auditLog.create({
      data: {
        action: 'LOGOUT',
        userId: decoded.userId,
        details: `Utilisateur ${decoded.email} s'est d√©connect√©`,
      },
    });

    return res.status(200).json({
      message: 'D√©connexion r√©ussie',
    });
  } catch (error) {
    console.error('Erreur lors de la d√©connexion:', error);
    return res.status(500).json({ error: 'Erreur serveur lors de la d√©connexion.' });
  }
};

/**
 * Mettre √† jour le profil utilisateur
 */
export const updateProfile = async (req: Request, res: Response) => {
  try {
    const currentUser = (req as any).user;
    const userId = currentUser?.id;

    if (!userId) {
      return res.status(401).json({ error: 'Non authentifi√©' });
    }

    const { name, email, phone, bloodGroup, height, birthDate, location } = req.body;

    // Validation basique
    if (!name || !email) {
      return res.status(400).json({ error: 'Le nom et l\'email sont requis' });
    }

    // R√©cup√©rer l'utilisateur actuel depuis la DB
    const user = await prisma.user.findUnique({
      where: { id: userId },
    });

    if (!user) {
      return res.status(404).json({ error: 'Utilisateur non trouv√©' });
    }

    // V√©rifier si l'email est d√©j√† utilis√© par un AUTRE utilisateur
    const emailChanged = email !== user.email;
    
    if (emailChanged) {
      const existingUser = await prisma.user.findUnique({
        where: { email },
      });

      if (existingUser && existingUser.id !== userId) {
        return res.status(400).json({ error: 'Cet email est d√©j√† utilis√© par un autre compte' });
      }
    }

    // Mettre √† jour l'utilisateur
    const updatedUser = await prisma.user.update({
      where: { id: userId },
      data: {
        name,
        email,
        phone: phone || null,
      },
    });

    // Mettre √† jour les donn√©es du patient si c'est un patient
    if (updatedUser.role === 'PATIENT') {
      const patient = await prisma.patient.findUnique({
        where: { userId: userId },
      });

      if (patient) {
        await prisma.patient.update({
          where: { id: patient.id },
          data: {
            bloodGroup: bloodGroup || null,
            height: height ? parseFloat(height) : null,
            birthDate: birthDate ? new Date(birthDate) : null,
            location: location || null,
          },
        });
      }
    }

    // Si l'email a √©t√© modifi√©, invalider toutes les sessions existantes
    if (emailChanged) {
      await prisma.session.deleteMany({
        where: { userId: userId },
      });
    }

    // Audit log
    await prisma.auditLog.create({
      data: {
        action: 'UPDATE_PROFILE',
        userId: userId,
        details: `Utilisateur ${updatedUser.email} a mis √† jour son profil`,
      },
    });

    // Retourner l'utilisateur mis √† jour (sans le mot de passe)
    const { password: _, ...userWithoutPassword } = updatedUser;
    return res.status(200).json({
      message: 'Profil mis √† jour avec succ√®s',
      user: userWithoutPassword,
      emailChanged: emailChanged, // Indiquer si l'email a chang√©
    });
  } catch (error) {
    console.error('Erreur lors de la mise √† jour du profil:', error);
    return res.status(500).json({ error: 'Erreur serveur lors de la mise √† jour du profil' });
  }
};

/**
 * Mettre √† jour le mot de passe
 */
export const updatePassword = async (req: Request, res: Response) => {
  try {
    const currentUser = (req as any).user;
    const userId = currentUser?.id;

    if (!userId) {
      return res.status(401).json({ error: 'Non authentifi√©' });
    }

    const { currentPassword, newPassword } = req.body;

    // Validation
    if (!currentPassword || !newPassword) {
      return res.status(400).json({ error: 'Tous les champs sont requis' });
    }

    if (newPassword.length < 6) {
      return res.status(400).json({ error: 'Le nouveau mot de passe doit contenir au moins 6 caract√®res' });
    }

    // R√©cup√©rer l'utilisateur avec le mot de passe
    const user = await prisma.user.findUnique({
      where: { id: userId },
    });

    if (!user) {
      return res.status(404).json({ error: 'Utilisateur non trouv√©' });
    }

    // V√©rifier l'ancien mot de passe
    const isPasswordValid = await bcrypt.compare(currentPassword, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Mot de passe actuel incorrect' });
    }

    // Hasher le nouveau mot de passe
    const hashedPassword = await bcrypt.hash(newPassword, 10);

    // Mettre √† jour le mot de passe
    await prisma.user.update({
      where: { id: userId },
      data: {
        password: hashedPassword,
      },
    });

    // Audit log
    await prisma.auditLog.create({
      data: {
        action: 'UPDATE_PASSWORD',
        userId: userId,
        details: `Utilisateur ${user.email} a modifi√© son mot de passe`,
      },
    });

    return res.status(200).json({
      message: 'Mot de passe modifi√© avec succ√®s',
    });
  } catch (error) {
    console.error('Erreur lors de la modification du mot de passe:', error);
    return res.status(500).json({ error: 'Erreur serveur lors de la modification du mot de passe' });
  }
};

